
import { Handler, HandlerEvent, HandlerContext } from '@netlify/functions';
import { supabase } from '../../services/supabaseClient'; // Adjusted path

const commonHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
  'Content-Type': 'application/json',
};

const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {
  // Handle OPTIONS preflight request for CORS
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 204,
      headers: commonHeaders,
      body: '',
    };
  }

  const pathParts = event.path.split('/').filter(Boolean);
  const resourceId = pathParts.length > 2 ? pathParts[2] : null; //  e.g. /api/products/PRODUCT_ID -> PRODUCT_ID

  try {
    switch (event.httpMethod) {
      case 'GET':
        if (resourceId) {
          // Get single product by ID
          const { data, error } = await supabase
            .from('products')
            .select('*')
            .eq('id', resourceId)
            .single();
          if (error) throw error;
          if (!data) return { statusCode: 404, headers: commonHeaders, body: JSON.stringify({ message: 'Product not found'}) };
          return { statusCode: 200, headers: commonHeaders, body: JSON.stringify(data) };
        } else {
          // Get all products
          const { data, error } = await supabase.from('products').select('*').order('created_at', { ascending: false });
          if (error) throw error;
          return { statusCode: 200, headers: commonHeaders, body: JSON.stringify(data || []) };
        }

      case 'POST':
        const newProduct = JSON.parse(event.body || '{}');
        // ID is generated by DB
        const { data: createdData, error: createError } = await supabase
          .from('products')
          .insert(newProduct)
          .select()
          .single();
        if (createError) throw createError;
        return { statusCode: 201, headers: commonHeaders, body: JSON.stringify(createdData) };

      case 'PUT':
        if (!resourceId) return { statusCode: 400, headers: commonHeaders, body: JSON.stringify({ message: 'Product ID required for update' }) };
        const updatedProductData = JSON.parse(event.body || '{}');
        // Don't allow changing ID
        delete updatedProductData.id;
        const { data: updatedData, error: updateError } = await supabase
          .from('products')
          .update(updatedProductData)
          .eq('id', resourceId)
          .select()
          .single();
        if (updateError) throw updateError;
        if (!updatedData) return { statusCode: 404, headers: commonHeaders, body: JSON.stringify({ message: 'Product not found or failed to update'}) };
        return { statusCode: 200, headers: commonHeaders, body: JSON.stringify(updatedData) };

      case 'DELETE':
        if (!resourceId) return { statusCode: 400, headers: commonHeaders, body: JSON.stringify({ message: 'Product ID required for delete' }) };
        const { error: deleteError } = await supabase
          .from('products')
          .delete()
          .eq('id', resourceId);
        if (deleteError) throw deleteError;
        return { statusCode: 204, headers: commonHeaders, body: '' }; // No content

      default:
        return { statusCode: 405, headers: commonHeaders, body: JSON.stringify({ message: 'Method Not Allowed' }) };
    }
  } catch (error: any) {
    console.error('Error in netlify/functions/products.ts:', error);
    const message = typeof error.message === 'string' ? error.message : 'An unexpected error occurred.';
    const details = typeof error.details === 'string' ? error.details : undefined;
    const hint = typeof error.hint === 'string' ? error.hint : undefined;
    
    // Determine status code: Supabase PostgREST errors usually have a specific code
    let statusCode = 500;
    if (error && error.code && typeof error.code === 'string' && error.code.startsWith('PGRST')) {
      statusCode = 400; // Or map specific PGRST codes to 404, 409 etc.
    } else if (error && typeof error.status === 'number') {
      statusCode = error.status;
    }

    return {
      statusCode,
      headers: commonHeaders,
      body: JSON.stringify({ message, ...(details && { details }), ...(hint && { hint }) }),
    };
  }
};

export { handler };
