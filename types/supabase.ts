
// This file will be auto-generated by Supabase CLI.
// Run: npx supabase gen types typescript --linked > types/supabase.ts
//
// For now, this is a placeholder. The Supabase client will work with `any`
// if this file doesn't provide the correct 'Database' type.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      products: {
        Row: {
          id: string
          name: string
          price: number // Represents retail_price
          salon_price: number | null
          exchange_rate: number | null
          description: string | null
          image_url: string | null
          created_at: string | null
        }
        Insert: {
          id?: string
          name: string
          price: number // Represents retail_price
          salon_price?: number | null
          exchange_rate?: number | null
          description?: string | null
          image_url?: string | null
          created_at?: string | null
        }
        Update: {
          id?: string
          name?: string
          price?: number // Represents retail_price
          salon_price?: number | null
          exchange_rate?: number | null
          description?: string | null
          image_url?: string | null
          created_at?: string | null
        }
        Relationships: []
      }
      customers: {
        Row: {
          id: string
          name: string
          email: string
          phone: string | null
          address_street: string | null
          address_city: string | null
          address_state: string | null
          address_zip: string | null
          address_country: string | null
          join_date: string 
          instagram_handle: string | null
          viber_number: string | null
          created_at: string | null
        }
        Insert: {
          id?: string
          name: string
          email: string
          phone?: string | null
          address_street?: string | null
          address_city?: string | null
          address_state?: string | null
          address_zip?: string | null
          address_country?: string | null
          join_date: string
          instagram_handle?: string | null
          viber_number?: string | null
          created_at?: string | null
        }
        Update: {
          id?: string
          name?: string
          email?: string
          phone?: string | null
          address_street?: string | null
          address_city?: string | null
          address_state?: string | null
          address_zip?: string | null
          address_country?: string | null
          join_date?: string
          instagram_handle?: string | null
          viber_number?: string | null
          created_at?: string | null
        }
        Relationships: []
      }
      orders: {
        Row: {
          id: string
          customer_id: string
          customer_name: string
          date: string
          status: "Pending" | "Shipped" | "Delivered" | "Cancelled"
          total_amount: number
          discount: number | null
          created_at: string | null
        }
        Insert: {
          id?: string
          customer_id: string
          customer_name: string
          date: string
          status: "Pending" | "Shipped" | "Delivered" | "Cancelled"
          total_amount: number
          discount?: number | null
          created_at?: string | null
        }
        Update: {
          id?: string
          customer_id?: string
          customer_name?: string
          date?: string
          status?: "Pending" | "Shipped" | "Delivered" | "Cancelled"
          total_amount?: number
          discount?: number | null
          created_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "orders_customer_id_fkey"
            columns: ["customer_id"]
            referencedRelation: "customers"
            referencedColumns: ["id"]
          }
        ]
      }
      order_items: {
        Row: {
          id: string
          order_id: string
          product_id: string | null // Can be null if product was deleted but order item remains
          product_name: string
          quantity: number
          price: number
          created_at: string | null
        }
        Insert: {
          id?: string
          order_id: string
          product_id?: string | null
          product_name: string
          quantity: number
          price: number
          created_at?: string | null
        }
        Update: {
          id?: string
          order_id?: string
          product_id?: string | null
          product_name?: string
          quantity?: number
          price?: number
          created_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "order_items_order_id_fkey"
            columns: ["order_id"]
            referencedRelation: "orders"
            referencedColumns: ["id"]
          }
          // If you have a products table and want to link product_id
          // {
          //   foreignKeyName: "order_items_product_id_fkey"
          //   columns: ["product_id"]
          //   referencedRelation: "products"
          //   referencedColumns: ["id"]
          //   onDelete: 'SET NULL' // Or 'RESTRICT' depending on desired behavior
          // }
        ]
      }
      managed_users: {
        Row: {
          id: string 
          name: string
          email: string
          notes: string | null
          created_at: string 
          added_by_admin_email: string | null
        }
        Insert: {
          id?: string 
          name: string
          email: string
          notes?: string | null
          created_at?: string 
          added_by_admin_email?: string | null
        }
        Update: {
          id?: string
          name?: string
          email?: string
          notes?: string | null
          created_at?: string
          added_by_admin_email?: string | null
        }
        Relationships: [] 
      }
    }
    Views: { [_ in never]: never }
    Functions: { [_ in never]: never }
    Enums: { [_ in never]: never }
    CompositeTypes: { [_ in never]: never }
  }
}
